<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on chezmoi.io</title>
    <link>https://chezmoi.io/docs/</link>
    <description>Recent content in Docs on chezmoi.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://chezmoi.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Changes</title>
      <link>https://chezmoi.io/docs/changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/changes/</guid>
      <description>Changes #  Upcoming #  Default diff format changing from chezmoi to git. #  Currently chezmoi outputs diffs in its own format, containing a mix of unified diffs and shell commands. This will be replaced with a git format diff in version 2.0.0.
gpgRecipient config variable changing to gpg.recipient #  The gpgRecipient config variable is changing to gpg.recipient. To update, change your config from:
gpgRecipient = &amp;quot;...&amp;quot;  to:</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>https://chezmoi.io/docs/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/contributing/</guid>
      <description>Contributing Guide #  Getting started #  chezmoi is written in Go and development happens on GitHub. The rest of this document assumes that you&amp;rsquo;ve checked out chezmoi locally.
Developing locally #  chezmoi requires Go 1.13 or later and Go modules enabled. Enable Go modules by setting the environment variable GO111MODULE=on.
chezmoi is a standard Go project, using standard Go tooling, with a few extra tools. Ensure that these extra tools are installed with:</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://chezmoi.io/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/faq/</guid>
      <description>Frequently Asked Questions #  How can I quickly check for problems with chezmoi on my machine? #  Run:
chezmoi doctor  Anything ok is fine, anything warning is only a problem if you want to use the related feature, and anything error indicates a definite problem.
What are the consequences of &amp;ldquo;bare&amp;rdquo; modifications to the target files? If my .zshrc is managed by chezmoi and I edit ~/.zshrc without using chezmoi edit, what happens?</description>
    </item>
    
    <item>
      <title>How-To</title>
      <link>https://chezmoi.io/docs/how-to/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/how-to/</guid>
      <description>How-To Guide #  Use a hosted repo to manage your dotfiles across multiple machines #  chezmoi relies on your version control system and hosted repo to share changes across multiple machines. You should create a repo on the source code repository of your choice (e.g. Bitbucket, GitHub, or GitLab, many people call their repo dotfiles) and push the repo in the source directory here. For example:
chezmoi cd git remote add origin https://github.</description>
    </item>
    
    <item>
      <title>Install</title>
      <link>https://chezmoi.io/docs/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/install/</guid>
      <description>Install Guide #  One-line binary install #  Install the correct binary for your operating system and architecture in ./bin with a single command.
curl -sfL https://git.io/chezmoi | sh  One-line package install #  Install chezmoi with a single command.
   OS Method Command     Linux snap snap install chezmoi --classic   Linux Linuxbrew brew install chezmoi   Alpine Linux apk apk add chezmoi   Arch Linux pacman pacman -S chezmoi   Guix Linux guix guix install chezmoi   NixOS Linux nix-env nix-env -i chezmoi   Void Linux xbps xbps-install -S chezmoi   macOS Homebrew brew install chezmoi   macOS MacPorts sudo port install chezmoi   Windows Scoop scoop bucket add twpayne https://github.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://chezmoi.io/docs/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/media/</guid>
      <description>Media #  Recommended article: Fedora Magazine: Take back your dotfiles with Chezmoi
   Date Version Format Link     2020-10-05 1.8.6 Text Dotfiles with /Chezmoi/   2020-08-13 1.8.3 Text Using BitWarden and Chezmoi to manage SSH keys   2020-08-09 1.8.3 Text Automating and testing dotfiles   2020-07-06 1.8.3 Video chezmoi: Manage your dotfiles across multiple machines, securely.   2020-07-03 1.8.3 Text Feeling at home in a LXD container   2020-06-15 1.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://chezmoi.io/docs/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/quick-start/</guid>
      <description>Quick Start Guide #  Concepts #  chezmoi stores the desired state of your dotfiles in the directory ~/.local/share/chezmoi. When you run chezmoi apply, chezmoi calculates the desired contents and permissions for each dotfile and then makes any changes necessary so that your dotfiles match that state.
Start using chezmoi on your current machine #  Initialize chezmoi:
chezmoi init  This will create a new git repository in ~/.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>https://chezmoi.io/docs/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/reference/</guid>
      <description>Reference Manual #  Concepts #  chezmoi evaluates the source state for the current machine and then updates the destination directory, where:
  The source state declares the desired state of your home directory, including templates and machine-specific configuration.
  The source directory is where chezmoi stores the source state, by default ~/.local/share/chezmoi.
  The target state is the source state computed for the current machine.</description>
    </item>
    
    <item>
      <title>Templating</title>
      <link>https://chezmoi.io/docs/templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chezmoi.io/docs/templating/</guid>
      <description>Templating Guide #  Introduction #  Templates are used to change the contents of a file depending on the environment. For example, you can use the hostname of the machine to create different configurations on different machines.
chezmoi uses the text/template syntax from Go extended with text template functions from sprig.
When reading files from the source state, chezmoi interprets them as a template if either of the following is true:</description>
    </item>
    
  </channel>
</rss>
